{"ast":null,"code":"import axios from 'axios';\n\n// Адрес вашего бэкенда\nconst API_URL = 'http://localhost:5000/api/contacts';\n\n// Определение интерфейса для Contact\n\n// Функция для получения списка контактов\nexport const getContacts = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data; // предполагается, что response.data будет массивом Contact\n  } catch (error) {\n    console.error('Error fetching contacts:', error);\n    throw error; // бросаем ошибку, чтобы обработать ее в компоненте\n  }\n};\n\n// Функция для создания нового контакта\nexport const createContact = async contact => {\n  try {\n    const response = await axios.post(API_URL, contact);\n    return response.data; // предполагается, что response.data будет объектом типа Contact\n  } catch (error) {\n    console.error('Error creating contact:', error);\n    throw error; // бросаем ошибку, чтобы обработать ее в компоненте\n  }\n};","map":{"version":3,"names":["axios","API_URL","getContacts","response","get","data","error","console","createContact","contact","post"],"sources":["C:/Users/dinar/OneDrive/Рабочий стол/да/проги/САЙТЫ/zad/Testone/client/src/api/contactApi.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Адрес вашего бэкенда\r\nconst API_URL = 'http://localhost:5000/api/contacts';\r\n\r\n// Определение интерфейса для Contact\r\nexport interface Contact {\r\n  id: number;\r\n  name: string;\r\n  phone: string;\r\n}\r\n\r\n// Функция для получения списка контактов\r\nexport const getContacts = async (): Promise<Contact[]> => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    return response.data; // предполагается, что response.data будет массивом Contact\r\n  } catch (error) {\r\n    console.error('Error fetching contacts:', error);\r\n    throw error; // бросаем ошибку, чтобы обработать ее в компоненте\r\n  }\r\n};\r\n\r\n// Функция для создания нового контакта\r\nexport const createContact = async (contact: Contact): Promise<Contact> => {\r\n  try {\r\n    const response = await axios.post(API_URL, contact);\r\n    return response.data; // предполагается, что response.data будет объектом типа Contact\r\n  } catch (error) {\r\n    console.error('Error creating contact:', error);\r\n    throw error; // бросаем ошибку, чтобы обработать ее в компоненте\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,oCAAoC;;AAEpD;;AAOA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAgC;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzC,OAAOE,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAOC,OAAgB,IAAuB;EACzE,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACU,IAAI,CAACT,OAAO,EAAEQ,OAAO,CAAC;IACnD,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}